{"uid":"9ebeb41909b7334e","name":"test_login[caseinfo1]","fullName":"testcase.test_scrm1_1.test_scrm_api.TestScrm#test_login","historyId":"4ec26c3f349e4f89592f6e2815949da8","time":{"start":1680258045108,"stop":1680258045136,"duration":28},"status":"broken","statusMessage":"Exception: 规范yaml的standard_yaml方法异常","statusTrace":"self = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nyq_result = [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def assert_result(self, yq_result, sj_result, return_code):\n        try:\n            all_flag = 0\n            for yq in yq_result:\n                for key, value in yq.items():\n                    if key == 'equals':\n>                       flag = self.equals_assert(value, sj_result, return_code)\n\ncommon\\request_util.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nvalue = {'errorCode': -2}\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def equals_assert(self, value, sj_result, return_code):\n        flag = 0\n        for assert_key, assert_value in value.items():\n            if assert_key == 'status_code':\n                if assert_value != return_code:\n                    flag += 1\n                    error_log(\"断言失败：Status Codee为：%s\" % assert_value)\n            else:\n                lists = jsonpath.jsonpath(sj_result, '$..%s' % assert_key)\n                if lists:\n                    if assert_value not in lists:\n                        flag = flag + 1\n>                       error_log('断言失败' + assert_key + '不等于' + str(assert_value))\n\ncommon\\request_util.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '断言失败errorCode不等于-2'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 断言失败errorCode不等于-2\n\ncommon\\logging_util.py:73: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\ncassinfo = {'extract': {'token': '$..token'}, 'name': '检查密码为空', 'parameterize': {'name-companyId-password-username-errorCode-asse...rs': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, ...}\n\n    def standard_yaml(self, cassinfo):\n        try:\n            logs(\"----------------接口测试开始--------------------\")\n            cassinfo_keys = cassinfo.keys()\n            if 'base_url' in cassinfo_keys and 'name' in cassinfo_keys and 'request' in cassinfo_keys and 'validate' in cassinfo_keys:\n                request_keys = cassinfo['request'].keys()\n                if 'method' in request_keys and 'url' in request_keys:\n                    # 发送请求\n                    name = cassinfo['name']\n                    base_url = cassinfo.pop('base_url')\n                    method = cassinfo['request'].pop('method')\n                    url = cassinfo['request'].pop('url')\n                    logs(\"接口名称:%s\" % name)\n                    res = self.send_request(method, base_url + url, **cassinfo['request'])\n                    # 接口关联\n                    return_text = res.text\n                    return_code = res.status_code\n                    return_json = ''\n                    if 'extract' in cassinfo_keys:\n                        for key, value in cassinfo['extract'].items():\n                            if '(.*?)' in value or '(.+?)' in value:\n                                zz_value = re.search(value, return_text)\n                                if zz_value:\n                                    extract_value = {key: zz_value.group(1)}\n                                    write_extract_yaml(extract_value)\n                            else:\n                                try:\n                                    return_json = res.json()\n                                    js_value = jsonpath.jsonpath(return_json, value)\n                                    if js_value:\n                                        extract_value = {key: js_value[0]}\n                                        write_extract_yaml(extract_value)\n                                except Exception as e:\n                                    logs(\"返回结果不是json格式，不能使用jsonpath\")\n                    # 断言\n                    yq_result = cassinfo['validate']\n                    sj_result = return_json\n>                   self.assert_result(yq_result, sj_result, return_code)\n\ncommon\\request_util.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nyq_result = [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def assert_result(self, yq_result, sj_result, return_code):\n        try:\n            all_flag = 0\n            for yq in yq_result:\n                for key, value in yq.items():\n                    if key == 'equals':\n                        flag = self.equals_assert(value, sj_result, return_code)\n                        all_flag = all_flag + flag\n                    elif key == 'contains':\n                        flag = self.contains_assert(value, sj_result)\n                        all_flag = all_flag + flag\n                    else:\n                        logs(\"暂时不支持此断言\")\n            logs(\"预期结果:%s\" % yq_result)\n            logs(\"实际结果:%s\" % json.loads(json.dumps(sj_result).replace(r'\\\\', '\\\\')))\n            logs(\"接口测试成功\")\n            logs(\"----------------接口测试结束--------------------\\n\")\n            assert all_flag == 0\n        except Exception as e:\n            logs(\"接口测试失败！！！\")\n            logs(\"----------------接口测试结束--------------------\\n\")\n>           error_log(\"断言判断的assert_result方法异常：%s\" % str(traceback.format_exc()))\n\ncommon\\request_util.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '断言判断的assert_result方法异常：Traceback (most recent call last):\\n  File \"E:\\\\Install\\\\python\\\\project\\\\scrm_api\\\\common\\\\re...rm_api\\\\common\\\\logging_util.py\", line 73, in error_log\\n    raise Exception(message)\\nException: 断言失败errorCode不等于-2\\n'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 断言判断的assert_result方法异常：Traceback (most recent call last):\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\request_util.py\", line 110, in assert_result\nE           flag = self.equals_assert(value, sj_result, return_code)\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\request_util.py\", line 140, in equals_assert\nE           error_log('断言失败' + assert_key + '不等于' + str(assert_value))\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\logging_util.py\", line 73, in error_log\nE           raise Exception(message)\nE       Exception: 断言失败errorCode不等于-2\n\ncommon\\logging_util.py:73: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_scrm1_1.test_scrm_api.TestScrm object at 0x00000232DF559D30>\ncaseinfo = {'extract': {'token': '$..token'}, 'name': '检查密码为空', 'parameterize': {'name-companyId-password-username-errorCode-asse...rs': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, ...}\n\n    @pytest.mark.parametrize('caseinfo', read_testcase_yaml('/testcase/test_scrm1_1/test_login.yaml'))\n    def test_login(self, caseinfo):\n>       res = RequestsUtil(Randoms()).standard_yaml(caseinfo)\n\ntestcase\\test_scrm1_1\\test_scrm_api.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\request_util.py:101: in standard_yaml\n    error_log('规范yaml的standard_yaml方法异常')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '规范yaml的standard_yaml方法异常'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 规范yaml的standard_yaml方法异常\n\ncommon\\logging_util.py:73: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_extract","time":{"start":1680258044738,"stop":1680258044738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"base_url","time":{"start":1680258044738,"stop":1680258044738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"_verify_url","time":{"start":1680258044738,"stop":1680258044738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"Exception: 规范yaml的standard_yaml方法异常","statusTrace":"self = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nyq_result = [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def assert_result(self, yq_result, sj_result, return_code):\n        try:\n            all_flag = 0\n            for yq in yq_result:\n                for key, value in yq.items():\n                    if key == 'equals':\n>                       flag = self.equals_assert(value, sj_result, return_code)\n\ncommon\\request_util.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nvalue = {'errorCode': -2}\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def equals_assert(self, value, sj_result, return_code):\n        flag = 0\n        for assert_key, assert_value in value.items():\n            if assert_key == 'status_code':\n                if assert_value != return_code:\n                    flag += 1\n                    error_log(\"断言失败：Status Codee为：%s\" % assert_value)\n            else:\n                lists = jsonpath.jsonpath(sj_result, '$..%s' % assert_key)\n                if lists:\n                    if assert_value not in lists:\n                        flag = flag + 1\n>                       error_log('断言失败' + assert_key + '不等于' + str(assert_value))\n\ncommon\\request_util.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '断言失败errorCode不等于-2'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 断言失败errorCode不等于-2\n\ncommon\\logging_util.py:73: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\ncassinfo = {'extract': {'token': '$..token'}, 'name': '检查密码为空', 'parameterize': {'name-companyId-password-username-errorCode-asse...rs': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, ...}\n\n    def standard_yaml(self, cassinfo):\n        try:\n            logs(\"----------------接口测试开始--------------------\")\n            cassinfo_keys = cassinfo.keys()\n            if 'base_url' in cassinfo_keys and 'name' in cassinfo_keys and 'request' in cassinfo_keys and 'validate' in cassinfo_keys:\n                request_keys = cassinfo['request'].keys()\n                if 'method' in request_keys and 'url' in request_keys:\n                    # 发送请求\n                    name = cassinfo['name']\n                    base_url = cassinfo.pop('base_url')\n                    method = cassinfo['request'].pop('method')\n                    url = cassinfo['request'].pop('url')\n                    logs(\"接口名称:%s\" % name)\n                    res = self.send_request(method, base_url + url, **cassinfo['request'])\n                    # 接口关联\n                    return_text = res.text\n                    return_code = res.status_code\n                    return_json = ''\n                    if 'extract' in cassinfo_keys:\n                        for key, value in cassinfo['extract'].items():\n                            if '(.*?)' in value or '(.+?)' in value:\n                                zz_value = re.search(value, return_text)\n                                if zz_value:\n                                    extract_value = {key: zz_value.group(1)}\n                                    write_extract_yaml(extract_value)\n                            else:\n                                try:\n                                    return_json = res.json()\n                                    js_value = jsonpath.jsonpath(return_json, value)\n                                    if js_value:\n                                        extract_value = {key: js_value[0]}\n                                        write_extract_yaml(extract_value)\n                                except Exception as e:\n                                    logs(\"返回结果不是json格式，不能使用jsonpath\")\n                    # 断言\n                    yq_result = cassinfo['validate']\n                    sj_result = return_json\n>                   self.assert_result(yq_result, sj_result, return_code)\n\ncommon\\request_util.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.request_util.RequestsUtil object at 0x00000232DF573FD0>\nyq_result = [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]\nsj_result = {'data': None, 'errorCode': -101, 'errorMsg': '非法参数'}\nreturn_code = 200\n\n    def assert_result(self, yq_result, sj_result, return_code):\n        try:\n            all_flag = 0\n            for yq in yq_result:\n                for key, value in yq.items():\n                    if key == 'equals':\n                        flag = self.equals_assert(value, sj_result, return_code)\n                        all_flag = all_flag + flag\n                    elif key == 'contains':\n                        flag = self.contains_assert(value, sj_result)\n                        all_flag = all_flag + flag\n                    else:\n                        logs(\"暂时不支持此断言\")\n            logs(\"预期结果:%s\" % yq_result)\n            logs(\"实际结果:%s\" % json.loads(json.dumps(sj_result).replace(r'\\\\', '\\\\')))\n            logs(\"接口测试成功\")\n            logs(\"----------------接口测试结束--------------------\\n\")\n            assert all_flag == 0\n        except Exception as e:\n            logs(\"接口测试失败！！！\")\n            logs(\"----------------接口测试结束--------------------\\n\")\n>           error_log(\"断言判断的assert_result方法异常：%s\" % str(traceback.format_exc()))\n\ncommon\\request_util.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '断言判断的assert_result方法异常：Traceback (most recent call last):\\n  File \"E:\\\\Install\\\\python\\\\project\\\\scrm_api\\\\common\\\\re...rm_api\\\\common\\\\logging_util.py\", line 73, in error_log\\n    raise Exception(message)\\nException: 断言失败errorCode不等于-2\\n'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 断言判断的assert_result方法异常：Traceback (most recent call last):\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\request_util.py\", line 110, in assert_result\nE           flag = self.equals_assert(value, sj_result, return_code)\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\request_util.py\", line 140, in equals_assert\nE           error_log('断言失败' + assert_key + '不等于' + str(assert_value))\nE         File \"E:\\Install\\python\\project\\scrm_api\\common\\logging_util.py\", line 73, in error_log\nE           raise Exception(message)\nE       Exception: 断言失败errorCode不等于-2\n\ncommon\\logging_util.py:73: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_scrm1_1.test_scrm_api.TestScrm object at 0x00000232DF559D30>\ncaseinfo = {'extract': {'token': '$..token'}, 'name': '检查密码为空', 'parameterize': {'name-companyId-password-username-errorCode-asse...rs': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, ...}\n\n    @pytest.mark.parametrize('caseinfo', read_testcase_yaml('/testcase/test_scrm1_1/test_login.yaml'))\n    def test_login(self, caseinfo):\n>       res = RequestsUtil(Randoms()).standard_yaml(caseinfo)\n\ntestcase\\test_scrm1_1\\test_scrm_api.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\request_util.py:101: in standard_yaml\n    error_log('规范yaml的standard_yaml方法异常')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = '规范yaml的standard_yaml方法异常'\n\n    def error_log(message):\n        LoggerUtil().create_log().error(message)\n        # 抛出异常\n>       raise Exception(message)\nE       Exception: 规范yaml的standard_yaml方法异常\n\ncommon\\logging_util.py:73: Exception","steps":[],"attachments":[{"uid":"52e86e6305e0c03c","name":"log","source":"52e86e6305e0c03c.txt","type":"text/plain","size":1359}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.test_scrm1_1"},{"name":"suite","value":"test_scrm_api"},{"name":"subSuite","value":"TestScrm"},{"name":"host","value":"zuoln-1"},{"name":"thread","value":"21452-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_scrm1_1.test_scrm_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'name': '检查密码为空', 'base_url': '${read_config(base,test_scrm)}', 'parameterize': {'name-companyId-password-username-errorCode-assert_str': '/test_datas/test_scrm_1_1/test_login_data.yaml'}, 'request': {'method': 'POST', 'url': '/scrm/cms/login', 'headers': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, 'extract': {'token': '$..token'}, 'validate': [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9ebeb41909b7334e.json","parameterValues":["{'name': '检查密码为空', 'base_url': '${read_config(base,test_scrm)}', 'parameterize': {'name-companyId-password-username-errorCode-assert_str': '/test_datas/test_scrm_1_1/test_login_data.yaml'}, 'request': {'method': 'POST', 'url': '/scrm/cms/login', 'headers': {'Content-Type': 'application/json'}, 'json': {'companyId': '1', 'password': '', 'username': '17740631283'}}, 'extract': {'token': '$..token'}, 'validate': [{'equals': {'errorCode': -2}}, {'contains': '账号或密码为空'}]}"]}